// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAccountProfiles(t *testing.T) {
	t.Parallel()

	query := AccountProfiles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAccountProfilesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountProfile{}
	if err = randomize.Struct(seed, o, accountProfileDBTypes, true, accountProfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AccountProfiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountProfilesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountProfile{}
	if err = randomize.Struct(seed, o, accountProfileDBTypes, true, accountProfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AccountProfiles().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AccountProfiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountProfilesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountProfile{}
	if err = randomize.Struct(seed, o, accountProfileDBTypes, true, accountProfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AccountProfileSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AccountProfiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountProfilesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountProfile{}
	if err = randomize.Struct(seed, o, accountProfileDBTypes, true, accountProfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AccountProfileExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AccountProfile exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AccountProfileExists to return true, but got false.")
	}
}

func testAccountProfilesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountProfile{}
	if err = randomize.Struct(seed, o, accountProfileDBTypes, true, accountProfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	accountProfileFound, err := FindAccountProfile(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if accountProfileFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAccountProfilesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountProfile{}
	if err = randomize.Struct(seed, o, accountProfileDBTypes, true, accountProfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AccountProfiles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAccountProfilesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountProfile{}
	if err = randomize.Struct(seed, o, accountProfileDBTypes, true, accountProfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AccountProfiles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAccountProfilesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	accountProfileOne := &AccountProfile{}
	accountProfileTwo := &AccountProfile{}
	if err = randomize.Struct(seed, accountProfileOne, accountProfileDBTypes, false, accountProfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}
	if err = randomize.Struct(seed, accountProfileTwo, accountProfileDBTypes, false, accountProfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = accountProfileOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = accountProfileTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AccountProfiles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAccountProfilesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	accountProfileOne := &AccountProfile{}
	accountProfileTwo := &AccountProfile{}
	if err = randomize.Struct(seed, accountProfileOne, accountProfileDBTypes, false, accountProfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}
	if err = randomize.Struct(seed, accountProfileTwo, accountProfileDBTypes, false, accountProfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = accountProfileOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = accountProfileTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AccountProfiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func accountProfileBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AccountProfile) error {
	*o = AccountProfile{}
	return nil
}

func accountProfileAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AccountProfile) error {
	*o = AccountProfile{}
	return nil
}

func accountProfileAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AccountProfile) error {
	*o = AccountProfile{}
	return nil
}

func accountProfileBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AccountProfile) error {
	*o = AccountProfile{}
	return nil
}

func accountProfileAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AccountProfile) error {
	*o = AccountProfile{}
	return nil
}

func accountProfileBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AccountProfile) error {
	*o = AccountProfile{}
	return nil
}

func accountProfileAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AccountProfile) error {
	*o = AccountProfile{}
	return nil
}

func accountProfileBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AccountProfile) error {
	*o = AccountProfile{}
	return nil
}

func accountProfileAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AccountProfile) error {
	*o = AccountProfile{}
	return nil
}

func testAccountProfilesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AccountProfile{}
	o := &AccountProfile{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, accountProfileDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AccountProfile object: %s", err)
	}

	AddAccountProfileHook(boil.BeforeInsertHook, accountProfileBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	accountProfileBeforeInsertHooks = []AccountProfileHook{}

	AddAccountProfileHook(boil.AfterInsertHook, accountProfileAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	accountProfileAfterInsertHooks = []AccountProfileHook{}

	AddAccountProfileHook(boil.AfterSelectHook, accountProfileAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	accountProfileAfterSelectHooks = []AccountProfileHook{}

	AddAccountProfileHook(boil.BeforeUpdateHook, accountProfileBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	accountProfileBeforeUpdateHooks = []AccountProfileHook{}

	AddAccountProfileHook(boil.AfterUpdateHook, accountProfileAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	accountProfileAfterUpdateHooks = []AccountProfileHook{}

	AddAccountProfileHook(boil.BeforeDeleteHook, accountProfileBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	accountProfileBeforeDeleteHooks = []AccountProfileHook{}

	AddAccountProfileHook(boil.AfterDeleteHook, accountProfileAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	accountProfileAfterDeleteHooks = []AccountProfileHook{}

	AddAccountProfileHook(boil.BeforeUpsertHook, accountProfileBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	accountProfileBeforeUpsertHooks = []AccountProfileHook{}

	AddAccountProfileHook(boil.AfterUpsertHook, accountProfileAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	accountProfileAfterUpsertHooks = []AccountProfileHook{}
}

func testAccountProfilesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountProfile{}
	if err = randomize.Struct(seed, o, accountProfileDBTypes, true, accountProfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AccountProfiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAccountProfilesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountProfile{}
	if err = randomize.Struct(seed, o, accountProfileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(accountProfileColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AccountProfiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAccountProfileToOneAccountUsingAccount(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AccountProfile
	var foreign Account

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, accountProfileDBTypes, true, accountProfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, accountDBTypes, false, accountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.AccountID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Account().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AccountProfileSlice{&local}
	if err = local.L.LoadAccount(ctx, tx, false, (*[]*AccountProfile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Account == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Account = nil
	if err = local.L.LoadAccount(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Account == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAccountProfileToOneSetOpAccountUsingAccount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AccountProfile
	var b, c Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, accountProfileDBTypes, false, strmangle.SetComplement(accountProfilePrimaryKeyColumns, accountProfileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Account{&b, &c} {
		err = a.SetAccount(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Account != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AccountProfiles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.AccountID, x.ID) {
			t.Error("foreign key was wrong value", a.AccountID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AccountID))
		reflect.Indirect(reflect.ValueOf(&a.AccountID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.AccountID, x.ID) {
			t.Error("foreign key was wrong value", a.AccountID, x.ID)
		}
	}
}

func testAccountProfileToOneRemoveOpAccountUsingAccount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AccountProfile
	var b Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, accountProfileDBTypes, false, strmangle.SetComplement(accountProfilePrimaryKeyColumns, accountProfileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAccount(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAccount(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Account().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Account != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.AccountID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.AccountProfiles) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAccountProfilesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountProfile{}
	if err = randomize.Struct(seed, o, accountProfileDBTypes, true, accountProfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAccountProfilesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountProfile{}
	if err = randomize.Struct(seed, o, accountProfileDBTypes, true, accountProfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AccountProfileSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAccountProfilesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountProfile{}
	if err = randomize.Struct(seed, o, accountProfileDBTypes, true, accountProfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AccountProfiles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	accountProfileDBTypes = map[string]string{`ID`: `integer`, `Name`: `character varying`, `AccountID`: `integer`}
	_                     = bytes.MinRead
)

func testAccountProfilesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(accountProfilePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(accountProfileAllColumns) == len(accountProfilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AccountProfile{}
	if err = randomize.Struct(seed, o, accountProfileDBTypes, true, accountProfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AccountProfiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, accountProfileDBTypes, true, accountProfilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAccountProfilesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(accountProfileAllColumns) == len(accountProfilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AccountProfile{}
	if err = randomize.Struct(seed, o, accountProfileDBTypes, true, accountProfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AccountProfiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, accountProfileDBTypes, true, accountProfilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(accountProfileAllColumns, accountProfilePrimaryKeyColumns) {
		fields = accountProfileAllColumns
	} else {
		fields = strmangle.SetComplement(
			accountProfileAllColumns,
			accountProfilePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AccountProfileSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAccountProfilesUpsert(t *testing.T) {
	t.Parallel()

	if len(accountProfileAllColumns) == len(accountProfilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AccountProfile{}
	if err = randomize.Struct(seed, &o, accountProfileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AccountProfile: %s", err)
	}

	count, err := AccountProfiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, accountProfileDBTypes, false, accountProfilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AccountProfile struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AccountProfile: %s", err)
	}

	count, err = AccountProfiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
